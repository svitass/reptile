ref:  https://blog.csdn.net/pittpakk/article/details/81218566
requests库的主要方法：
(1) requests.request() 构造一个请求
(2) requests.get() 获取html
(3) requests.head() 获取html头部信息
>>> r=requests.head("http://httpbin.org/get")
>>>r.headers
 {'Connection': 'keep-alive', 'Server': 'meinheld/0.6.1', 'Date': 'Mon, 20 Nov 2017 08:08:46 GMT', 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Credentials': 'true', 'X-Powered-By': 'Flask', 'X-Processed-Time': '0.000658988952637', 'Content-Length': '268', 'Via': '1.1 vegur'}

(4) requests.post() 向html网页提交post请求  提交一个form表单，data,files
>>> payload={"key1":"value1","key2":"value2"}
>>> r=requests.post("http://httpbin.org/post",data=payload)
>>> print(r.text)
{
  "args": {},
  "data": "",
  "files": {},
  "form": {
    "key1": "value1",
    "key2": "value2"
  },
  "headers": {
    "Accept": "*/*",
    "Accept-Encoding": "gzip, deflate",
    "Connection": "close",
    "Content-Length": "23",
    "Content-Type": "application/x-www-form-urlencoded",
    "Host": "httpbin.org",
    "User-Agent": "python-requests/2.18.4"
  },
  "json": null,
  "origin": "218.197.153.150",
  "url": "http://httpbin.org/post"
}

(5) requests.put() 向html网页提交put请求
>>> payload={"key1":"value1","key2":"value2"}
>>> r=requests.put("http://httpbin.org/put",data=payload)
>>> print(r.text)
{
  "args": {},
  "data": "",
  "files": {},
  "form": {
    "key1": "value1",
    "key2": "value2"
  },
  "headers": {
    "Accept": "*/*",
    "Accept-Encoding": "gzip, deflate",
    "Connection": "close",
    "Content-Length": "23",
    "Content-Type": "application/x-www-form-urlencoded",
    "Host": "httpbin.org",
    "User-Agent": "python-requests/2.18.4"
  },
  "json": null,
  "origin": "218.197.153.150",
  "url": "http://httpbin.org/put"

(6) requests.patch() 向html提交局部修改的请求
和request.put类似
但是用patch时仅需要提交待修改的字段，节省网络带宽
而put必须将所有字符一起提交到url,未提交字段将会被删除

(7) requests.delete() 向html提交删除请求

response对象属性：
r.state_code http请求的返回状态，若为200表示请求成功
r.text http响应内容的字符串形式（返回的页面内容）
r.encoding 从http header中猜测的相应内容编码方式
r.apparent_encoding 从内容中分析出的响应内容编码方式
r.content http响应内容的二进制形式

爬取网页的通用代码框架：
try:
    r=requests.get(url,timeout=30)#请求超时时间为30秒
    r.raise_for_status()#如果状态不是200，则引发异常
    r.encoding=r.apparent_encoding #配置编码
    return r.text
except:
    return "产生异常"

